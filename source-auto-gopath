#!/bin/bash

# Script designed to be sourced in order to automatically set the gopath
# It finds the shorts path to a src directory is the directory tree
# Only a src directory wthin the $(get-repo-base-path) is used
# If no path is provided then the current orking directory is used instead

printlnErr() {
	# Using printf prevents echo from mangling any unusual filename characters
	printf "%s\n" "$1" >&2
}


# Check to see if not being sourced
if [[ $0 == "${BASH_SOURCE-}" ]]; then
	# Only use set when not being sourced to avoid effecting the calling environment
	set -euf -o pipefail
	printlnErr "This script shoud be sourced to actually set the GOPATH"
	printlnErr "Running it in a sub-shell like this means it has no effect"
fi

# The repo base path
repobasepath=$(get-repo-base-path)

# Get the repo to be acted upon
if [ "$#" -eq "0" ]; then
	# Use the current repo
	provisionalgopath="$(readlink -f "$(pwd)")"
else
	# Get the specified repo
	provisionalgopath="$(readlink -f "$*")"
fi

# Try and find the outer go workspace
provisionalgopath="$(printf "%s" "$provisionalgopath/src/" | sed 's:/src/.*::')"
if [[ "$provisionalgopath" == "." ]]; then
	printlnErr "'$*' does not appear to be within a usable gopath"
	unset repobasepath provisionalgopath
	if [[ $0 != "${BASH_SOURCE-}" ]]; then
		# No error code when sourced to avoid killing the shell
		return 0
	fi
	exit 1
fi

# Check that the destination directory exists and contains an src directory
if [ ! -d "$provisionalgopath/src" ]; then
	printlnErr "'$provisionalgopath/src' must exist for it to be used as a go path"
	unset repobasepath provisionalgopath
	if [[ $0 != "${BASH_SOURCE-}" ]]; then
		# No error code when sourced to avoid killing the shell
		return 0
	fi
	exit 1
fi

# Check that the destination is inside the repos base path
if [[ "$provisionalgopath" != "${repobasepath}/"* ]]; then
	printlnErr "'${provisionalgopath}' is not within '${repobasepath}'; unable to proceed"
	unset repobasepath provisionalgopath
	if [[ $0 != "${BASH_SOURCE-}" ]]; then
		# No error code when sourced to avoid killing the shell
		return 0
	fi
	exit 1
fi

if [[ $0 == "${BASH_SOURCE-}" ]]; then
	printlnErr "GOPATH would have been set to $provisionalgopath"
else
	export GOPATH="$provisionalgopath"
	printlnErr "GOPATH is now $provisionalgopath"
fi
unset repobasepath provisionalgopath
